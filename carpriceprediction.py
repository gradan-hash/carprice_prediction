# -*- coding: utf-8 -*-
"""Carpriceprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M-JOvX5dtJBRvvCnEj2XCS_ryjW1tmj6
"""

import pandas as pd
import matplotlib.pyplot as plt
import joblib


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

car_dataset = pd.read_csv(
    r"C:\Users\CORNELIUS\Downloads\carpriceprediction\car data.csv")


car_dataset.head()

car_dataset.shape[0]
car_dataset.shape[1]

car_dataset.isnull().sum()
car_dataset.Fuel_Type.value_counts()
car_dataset.Seller_Type.value_counts()
car_dataset.Transmission.value_counts()

car_dataset.replace(
    {'Fuel_Type': {'Petrol': 0, 'Diesel': 1, 'CNG': 2}}, inplace=True)
car_dataset.replace(
    {'Seller_Type': {'Dealer': 0, 'Individual': 1, }}, inplace=True)
car_dataset.replace(
    {'Transmission': {'Manual': 0, 'Automatic': 1, }}, inplace=True)

car_dataset.head()

X = car_dataset.drop(['Car_Name', 'Selling_Price'], axis=1)
y = car_dataset['Selling_Price']

print("x", X)
print("Y", y)

X_train, X_test, Y_train, Y_test = train_test_split(
    X, y, test_size=0.1, random_state=2)

lr = LinearRegression()

lr.fit(X_train, Y_train)

trained_data_prediction = lr.predict(X_train)

# x squared error
error_score = metrics.r2_score(Y_train, trained_data_prediction)
print("error score :", error_score)

# visualise the actual price and the predicted data
plt.scatter(Y_train, trained_data_prediction)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.title('actual price vs predicted prices')
plt.show()

test_data_prediction = lr.predict(X_test)

# x squared error
error_score = metrics.r2_score(Y_test, test_data_prediction)
print("error score :", error_score)

# visualise the actual price and the predicted data
plt.scatter(Y_test, test_data_prediction)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.title('actual price vs predicted prices')
plt.show()

laso_regression = Lasso()

# train using lasso
laso_regression.fit(X_train, Y_train)

lasopred = laso_regression.predict(X_train)

# x squared error
error_score = metrics.r2_score(Y_train, lasopred)
print("error score :", error_score)

# visualise the actual price and the predicted data
plt.scatter(Y_train, lasopred)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.title('actual price vs predicted prices')
plt.show()

lasopred = laso_regression.predict(X_test)

# x squared error
error_score = metrics.r2_score(Y_test, lasopred)
print("error score :", error_score)

# visualise the actual price and the predicted data
plt.scatter(Y_test, lasopred)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.title('actual price vs predicted prices')
plt.show()


# Save the model to a file
model_filename = 'lasopred.pkl'
joblib.dump(lr, model_filename)
